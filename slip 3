1.	Write a JSP program to display the details of Patient (PNo, PName, Address, age, disease) in tabular form on browser
<%@ page contentType="text/html" pageEncoding="UTF-8" %>
<%@ page import="java.sql.*" %>
<!DOCTYPE html>
<html>
<body>
<%
try {
    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
    Connection cn = DriverManager.getConnection("jdbc:odbc:hospital_data", "", "");
    Statement st = cn.createStatement();
    ResultSet rs = st.executeQuery("select * from Hospital");
%>
    <table border="1" width="40%">
        <tr>
            <td>Hospital No</td>
            <td>Name</td>
            <td>Address</td>
        </tr>
        <% while (rs.next()) { %>
        <tr>
            <td><%= rs.getInt("hno") %></td>
            <td><%= rs.getString("hname") %></td>
            <td><%= rs.getString("address") %></td>
        </tr>
        <% }
        cn.close();
    } catch (Exception e) {
        out.println(e);
    }
%>
</body>
</html>


2.	Write a Java program to create LinkedList of String objects and perform the following: i. Add element at the end of the list
ii. Delete first element of the list iii. Display the contents of list in reverse order 
import java.io.*;

public class LinkedList {
    Node head;

    static class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    public static LinkedList insert(LinkedList list, int data) {
        Node new_node = new Node(data);
        new_node.next = null;

        if (list.head == null) {
            list.head = new_node;
        } else {
            Node last = list.head;
            while (last.next != null) {
                last = last.next;
            }
            last.next = new_node;
        }

        return list;
    }

    public static void printList(LinkedList list) {
        Node currNode = list.head;

        System.out.print("LinkedList: ");

        while (currNode != null) {
            System.out.print(currNode.data + " ");
            currNode = currNode.next;
        }

        System.out.println();
    }

    public static LinkedList deleteByKey(LinkedList list, int key) {
        Node currNode = list.head, prev = null;

        if (currNode != null && currNode.data == key) {
            list.head = currNode.next;
            System.out.println(key + " found and deleted");
            return list;
        }

        while (currNode != null && currNode.data != key) {
            prev = currNode;
            currNode = currNode.next;
        }

        if (currNode != null) {
            prev.next = currNode.next;
            System.out.println(key + " found and deleted");
        }

        if (currNode == null) {
            System.out.println(key + " not found");
        }

        return list;
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        list = insert(list, 1);
        list = insert(list, 2);
        list = insert(list, 3);
        list = insert(list, 4);
        list = insert(list, 5);
        list = insert(list, 6);
        list = insert(list, 7);
        list = insert(list, 8);

        printList(list);

        deleteByKey(list, 1);

        printList(list);

        deleteByKey(list, 4);

        printList(list);

        deleteByKey(list, 10);

        printList(list);
    }
}

